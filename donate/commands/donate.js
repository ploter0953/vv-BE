const { SlashCommandBuilder, EmbedBuilder, MessageFlags } = require('discord.js');
const { saveDonation } = require('../mongo');
const { MongoClient } = require('mongodb');

const LOG_CHANNEL_ID = process.env.DISCORD_LOG_CHANNEL_ID || '1279062001586278411';
const MONGO_URI = process.env.MONGODB_URI;
if (!MONGO_URI) throw new Error('MONGODB_URI env variable is required!');
const DB_NAME = 'vtuberverse';
const USERS_COLLECTION = 'users';
const DONATIONS_COLLECTION = 'donations';

// Per-user cooldown tracking
const userCooldowns = new Map();

module.exports = {
  data: new SlashCommandBuilder()
    .setName('donate')
    .setDescription('Donate cho ng∆∞·ªùi d√πng kh√°c tr√™n projectvtuber.com')
    .addStringOption(option =>
      option.setName('username')
        .setDescription('Username c·ªßa ng∆∞·ªùi nh·∫≠n donate tr√™n projectvtuber.com')
        .setRequired(true))
    .addStringOption(option =>
      option.setName('display_name')
        .setDescription('T√™n hi·ªÉn th·ªã khi donate')
        .setRequired(true)
        .setMaxLength(50))
    .addIntegerOption(option =>
      option.setName('amount')
        .setDescription('S·ªë ti·ªÅn donate (t·ª´ 10,000 VNƒê tr·ªü l√™n)')
        .setRequired(true)
        .setMinValue(10000))
    .addStringOption(option =>
      option.setName('message')
        .setDescription('L·ªùi nh·∫Øn (t√πy ch·ªçn)')
        .setRequired(false)
        .setMaxLength(100)),

  async execute(interaction) {
    const discordId = interaction.user.id;
    
    // Check per-user cooldown
    const lastDonateTime = userCooldowns.get(discordId);
    const now = Date.now();
    const cooldownTime = 20000; // 20 seconds
    
    if (lastDonateTime && (now - lastDonateTime) < cooldownTime) {
      const remainingTime = Math.ceil((cooldownTime - (now - lastDonateTime)) / 1000);
      return interaction.reply({
        content: `‚è∞ B·∫°n v·ª´a donate g·∫ßn ƒë√¢y, vui l√≤ng ƒë·ª£i ${remainingTime} gi√¢y n·ªØa!`,
        flags: MessageFlags.Ephemeral
      });
    }

          const targetUsername = interaction.options.getString('username').trim();
      const displayName = interaction.options.getString('display_name').trim();
      const amount = interaction.options.getInteger('amount');
      const message = (interaction.options.getString('message') || 'Kh√¥ng c√≥').trim();

      // Sanitize inputs
      if (!targetUsername || targetUsername.length < 1 || targetUsername.length > 30) {
        return interaction.reply({
          content: '‚ö†Ô∏è Username kh√¥ng h·ª£p l·ªá (1-30 k√Ω t·ª±)',
          flags: MessageFlags.Ephemeral
        });
      }

      if (!displayName || displayName.length < 1 || displayName.length > 50) {
        return interaction.reply({
          content: '‚ö†Ô∏è T√™n hi·ªÉn th·ªã kh√¥ng h·ª£p l·ªá (1-50 k√Ω t·ª±)',
          flags: MessageFlags.Ephemeral
        });
      }

      if (message.length > 100) {
        return interaction.reply({
          content: '‚ö†Ô∏è L·ªùi nh·∫Øn qu√° d√†i (t·ªëi ƒëa 100 k√Ω t·ª±)',
          flags: MessageFlags.Ephemeral
        });
      }

    if (amount < 10000) {
      return interaction.reply({
        content: '‚ö†Ô∏è S·ªë ti·ªÅn ph·∫£i t·ª´ 10,000 VNƒê tr·ªü l√™n!',
        flags: MessageFlags.Ephemeral
      });
    }

    let client = null;
    try {
      client = new MongoClient(MONGO_URI);
      await client.connect();
      const db = client.db(DB_NAME);
      const users = db.collection(USERS_COLLECTION);

      // T√¨m user donate (ng∆∞·ªùi th·ª±c hi·ªán donate)
      const donor = await users.findOne({
        discord_id: discordId,
        is_discord_verified: true
      });

      if (!donor) {
        await client.close();
        return interaction.reply({
          content: '‚ö†Ô∏è B·∫°n ch∆∞a k·∫øt n·ªëi t√†i kho·∫£n website v·ªõi Discord. Vui l√≤ng:\n1. Th√™m Discord ID v√†o profile website\n2. D√πng l·ªánh `/verify` ƒë·ªÉ x√°c minh',
          flags: MessageFlags.Ephemeral
        });
      }

      if (donor.balance < amount) {
        await client.close();
        return interaction.reply({
          content: `‚ùå S·ªë d∆∞ kh√¥ng ƒë·ªß. Hi·ªán c√≥: ${donor.balance.toLocaleString()} VNƒê`,
          flags: MessageFlags.Ephemeral
        });
      }

      // T√¨m user nh·∫≠n donate
      const recipient = await users.findOne({
        username: targetUsername
      });

      if (!recipient) {
        await client.close();
        return interaction.reply({
          content: `‚ùå Kh√¥ng t√¨m th·∫•y user "${targetUsername}" tr√™n projectvtuber.com. Vui l√≤ng ki·ªÉm tra l·∫°i username.`,
          flags: MessageFlags.Ephemeral
        });
      }

      // Ki·ªÉm tra kh√¥ng donate cho ch√≠nh m√¨nh
      if (donor._id.toString() === recipient._id.toString()) {
        await client.close();
        return interaction.reply({
          content: '‚ùå B·∫°n kh√¥ng th·ªÉ donate cho ch√≠nh m√¨nh.',
          flags: MessageFlags.Ephemeral
        });
      }

      // Use transaction to ensure data consistency
      const session = client.startSession();
      try {
        await session.withTransaction(async () => {
          // Check donor balance again within transaction
          const donorInTransaction = await users.findOne({ _id: donor._id }, { session });
          if (!donorInTransaction || donorInTransaction.balance < amount) {
            throw new Error('Insufficient balance');
          }

          // Update donor balance and donated amount
          const donorUpdateResult = await users.updateOne(
            { _id: donor._id, balance: { $gte: amount } },
            { 
              $inc: { 
                balance: -amount,
                donated: amount
              } 
            },
            { session }
          );

          if (donorUpdateResult.modifiedCount === 0) {
            throw new Error('Failed to update donor balance');
          }
          
          // Update recipient donate_received
          const recipientUpdateResult = await users.updateOne(
            { _id: recipient._id },
            { 
              $inc: { 
                donate_received: amount
              } 
            },
            { session }
          );

          if (recipientUpdateResult.modifiedCount === 0) {
            throw new Error('Failed to update recipient');
          }
        });
      } finally {
        await session.endSession();
      }

      // Set per-user cooldown
      userCooldowns.set(discordId, Date.now());
      
      // Clean up old cooldowns (older than 1 hour)
      const oneHourAgo = Date.now() - (60 * 60 * 1000);
      for (const [userId, timestamp] of userCooldowns.entries()) {
        if (timestamp < oneHourAgo) {
          userCooldowns.delete(userId);
        }
      }

      // Embed ph·∫£n h·ªìi
      const embed = new EmbedBuilder()
        .setColor('#00FF00')
        .setTitle('üéâ Donate th√†nh c√¥ng!')
        .addFields(
          { name: 'Ng∆∞·ªùi donate', value: displayName, inline: true },
          { name: 'Ng∆∞·ªùi nh·∫≠n', value: recipient.username, inline: true },
          { name: 'S·ªë ti·ªÅn', value: `${amount.toLocaleString()} VNƒê`, inline: true },
          { name: 'L·ªùi nh·∫Øn', value: String(message) },
          { name: '', value: '`Tin nh·∫Øn c·ªßa b·∫°n s·∫Ω hi·ªÉn th·ªã tr√™n stream sau 5-10 gi√¢y x·ª≠ l√≠`', inline: true }
        )
        .setDescription("`C·∫£m ∆°n b·∫°n v√¨ ƒë√£ donate cho ${recipient.username}, m·ªói l∆∞·ª£t ·ªßng h·ªô c·ªßa b·∫°n l√† ƒë·ªông l·ª±c ƒë·ªÉ ch√∫ng m√¨nh ti·∫øp t·ª•c c·ªë g·∫Øng!`")
        .setTimestamp();

      await interaction.reply({ embeds: [embed], ephemeral: false });

      // G·ª≠i log ƒë·∫øn k√™nh
      const logChannel = interaction.client.channels.cache.get(LOG_CHANNEL_ID);
      if (logChannel) {
        const logEmbed = new EmbedBuilder()
          .setColor('#ffaa00')
          .setTitle('üì¢ Ghi nh·∫≠n donate')
          .addFields(
            { name: 'Discord', value: `<@${discordId}> (${discordId})`, inline: false },
            { name: 'Ng∆∞·ªùi donate', value: donor.username || interaction.user.username, inline: true },
            { name: 'Ng∆∞·ªùi nh·∫≠n', value: recipient.username, inline: true },
            { name: 'S·ªë ti·ªÅn', value: `${amount.toLocaleString()} VNƒê`, inline: true },
            { name: 'L·ªùi nh·∫Øn', value: String(message), inline: false }
          )
          .setTimestamp();

        await logChannel.send({ embeds: [logEmbed] });
      }

      // Save donation record cho recipient
      const donationData = {
        userId: recipient._id.toString(), // L∆∞u cho ng∆∞·ªùi nh·∫≠n donate
        name: displayName, // S·ª≠ d·ª•ng display name thay v√¨ username
        amount: amount,
        message: message,
        source: 'discord',
        donorId: donor._id.toString() // Th√™m th√¥ng tin donor
      };
      await saveDonation(donationData);

      await client.close();

    } catch (error) {
      console.error('‚ùå L·ªói khi x·ª≠ l√Ω donate:', error);
      
      // Log detailed error for debugging
      console.error('Error details:', {
        discordId,
        targetUsername,
        amount,
        error: error.message,
        stack: error.stack
      });
      
      await interaction.reply({
        content: '‚ö†Ô∏è C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω donate. Vui l√≤ng th·ª≠ l·∫°i sau.',
        flags: MessageFlags.Ephemeral
      });
    } finally {
      // Ensure client is always closed
      if (client) {
        try {
          await client.close();
        } catch (closeError) {
          console.error('Error closing database connection:', closeError);
        }
      }
    }
  }
};

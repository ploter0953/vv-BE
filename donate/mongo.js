// mongo.js
const { MongoClient } = require('mongodb');

const uri = process.env.MONGODB_URI;
if (!uri) throw new Error('MONGODB_URI env variable is required!');

const dbName = 'vtuberverse';

// Lazy connection - ch·ªâ k·∫øt n·ªëi khi c·∫ßn
let client = null;
let db = null;
let users = null;
let donations = null;

async function getConnection() {
  if (!client) {
    client = new MongoClient(uri);
    await client.connect();
    db = client.db(dbName);
    
    // Ki·ªÉm tra v√† t·∫°o collection donate_users n·∫øu ch∆∞a t·ªìn t·∫°i
    const collections = await db.listCollections({ name: 'donate_users' }).toArray();
    if (collections.length === 0) {
      await db.createCollection('donate_users');
      console.log('üõ† T·∫°o collection "donate_users" m·ªõi');
    }

    // Ki·ªÉm tra v√† t·∫°o collection donations n·∫øu ch∆∞a t·ªìn t·∫°i
    const donationsCollections = await db.listCollections({ name: 'donations' }).toArray();
    if (donationsCollections.length === 0) {
      await db.createCollection('donations');
      console.log('üõ† T·∫°o collection "donations" m·ªõi');
    }

    users = db.collection('donate_users');
    donations = db.collection('donations');
    console.log('ƒê√£ k·∫øt n·ªëi v·ªõi database donate system.');
  }
  return { client, db, users, donations };
}

// T√¨m user theo discordId, n·∫øu ch∆∞a c√≥ th√¨ t·∫°o m·ªõi v·ªõi balance=0
async function findOrCreateUser(discordId) {
  const { users } = await getConnection();
  let user = await users.findOne({ _id: discordId });
  if (!user) {
    user = { _id: discordId, balance: 0, donated: 0 };
    await users.insertOne(user);
    console.log(`üÜï T·∫°o user m·ªõi v·ªõi Discord ID: ${discordId}`);
  }
  return user;
}

// C·ªông ti·ªÅn cho user (atomic, ƒë·∫£m b·∫£o user t·ªìn t·∫°i)
async function addBalance(discordId, amount) {
  const { users } = await getConnection();
  const result = await users.updateOne(
    { _id: discordId },
    { $inc: { balance: amount } },
    { upsert: true }
  );
  console.log(`üí∞ ƒê√£ c·ªông ${amount} cho user ${discordId}`);
}

// Tr·ª´ ti·ªÅn cho user (atomic, ƒë·∫£m b·∫£o user t·ªìn t·∫°i v√† ƒë·ªß s·ªë d∆∞)
async function deductBalance(discordId, amount) {
  const { users } = await getConnection();
  const result = await users.updateOne(
    { _id: discordId, balance: { $gte: amount } },
    { $inc: { balance: -amount } },
    { upsert: false }
  );
  if (result.matchedCount === 0 || result.modifiedCount === 0) {
    throw new Error('Kh√¥ng ƒë·ªß s·ªë d∆∞ ho·∫∑c user kh√¥ng t·ªìn t·∫°i');
  }
  console.log(`üì§ ƒê√£ tr·ª´ ${amount} t·ª´ user ${discordId}`);
}

async function getBalance(discordId) {
  const { users } = await getConnection();
  const user = await users.findOne({_id: discordId });
  return user?.balance || 0;
}

// C·ªông d·ªìn t·ªïng s·ªë ti·ªÅn ƒë√£ donate
async function addDonated(discordId, amount) {
  const { users } = await getConnection();
  await users.updateOne(
    { _id: discordId },
    { $inc: { donated: amount } },
    { upsert: true }
  );
  console.log(`ƒê√£ c·ªông d·ªìn ${amount} v√†o donated cho user ${discordId}`);
}

// L∆∞u donation record v·ªõi c·∫•u tr√∫c m·ªõi
async function saveDonation(donationData) {
  const { donations } = await getConnection();
  const donation = {
    id: donationData.userId, // ID ng∆∞·ªùi nh·∫≠n donate
    donate: [{
      name: donationData.name,
      amount: donationData.amount,
      message: donationData.message || '',
      timestamp: new Date(),
      donorId: donationData.donorId || null // Th√™m th√¥ng tin donor
    }],
    createdAt: new Date()
  };
  
  await donations.insertOne(donation);
  console.log(`üíù ƒê√£ l∆∞u donation record cho user ${donationData.userId}`);
}

// L·∫•y danh s√°ch donation c·ªßa user
async function getUserDonations(userId, limit = 10) {
  const { donations } = await getConnection();
  const donationRecord = await donations.findOne({ id: userId });
  if (!donationRecord || !donationRecord.donate) {
    return [];
  }
  
  // S·∫Øp x·∫øp theo timestamp m·ªõi nh·∫•t
  const sortedDonations = donationRecord.donate.sort((a, b) => 
    new Date(b.timestamp) - new Date(a.timestamp)
  );
  
  return sortedDonations.slice(0, limit);
}

// L·∫•y t·ªïng s·ªë ti·ªÅn ƒë√£ donate c·ªßa user
async function getUserTotalDonated(userId) {
  const { donations } = await getConnection();
  const donationRecord = await donations.findOne({ id: userId });
  if (!donationRecord || !donationRecord.donate) {
    return 0;
  }
  
  return donationRecord.donate.reduce((total, donation) => total + donation.amount, 0);
}

// L·∫•y top donors
async function getTopDonors(limit = 10) {
  const { donations } = await getConnection();
  const pipeline = [
    {
      $group: {
        _id: '$id',
        totalDonated: { $sum: { $reduce: { input: '$donate', initialValue: 0, in: { $add: ['$$value', '$$this.amount'] } } } }
      }
    },
    { $sort: { totalDonated: -1 } },
    { $limit: limit }
  ];
  
  return await donations.aggregate(pipeline).toArray();
}

// X√≥a donation records c≈© (sau 15 gi√¢y)
async function cleanupOldDonations() {
  const { donations } = await getConnection();
  const cutoffTime = new Date(Date.now() - 15 * 1000); // 15 gi√¢y tr∆∞·ªõc
  
  try {
    const result = await donations.deleteMany({
      createdAt: { $lt: cutoffTime }
    });
    
    if (result.deletedCount > 0) {
      console.log(`üßπ ƒê√£ x√≥a ${result.deletedCount} donation records c≈©`);
    }
  } catch (error) {
    console.error('Error cleaning up old donations:', error);
  }
}

// Cleanup inactive users (users with no activity for 30 days)
async function cleanupInactiveUsers() {
  const { users } = await getConnection();
  const thirtyDaysAgo = new Date(Date.now() - 30 * 24 * 60 * 60 * 1000);
  
  try {
    const result = await users.deleteMany({
      lastSeen: { $lt: thirtyDaysAgo },
      balance: 0,
      donated: 0,
      donate_received: 0
    });
    
    if (result.deletedCount > 0) {
      console.log(`üßπ ƒê√£ x√≥a ${result.deletedCount} inactive users`);
    }
  } catch (error) {
    console.error('Error cleaning up inactive users:', error);
  }
}

module.exports = {
  findOrCreateUser,
  addBalance,
  deductBalance,
  getBalance,
  addDonated,
  saveDonation,
  getUserDonations,
  getUserTotalDonated,
  getTopDonors,
  cleanupOldDonations,
  cleanupInactiveUsers
};
